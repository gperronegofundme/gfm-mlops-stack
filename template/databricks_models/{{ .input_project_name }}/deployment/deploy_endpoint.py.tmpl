# Databricks notebook source

from mlflow.deployments import get_deploy_client
from requests.exceptions import HTTPError


def deploy_serving_endpoint(model_name, version, env, model_schema):
    # dont create endpoint for envs other than staging/prod
    if env not in ["staging", "prod"]:
        print(f"Skipping deployment: {env} is not a valid environment.")
        return
    client = get_deploy_client("databricks")
    endpoint_name = f"{model_name}_endpoint_{env}"  # i.e. iris_endpoint_staging

    try:
        # Check if the endpoint exists
        endpoint = client.get_endpoint(endpoint_name)

        # Check if the existing endpoint is already serving the specified version
        current_version = endpoint["config"]["served_entities"][0]["entity_version"]
        if current_version == version:
            print(f"Skipping deployment: version {version} is already deployed.")
            return

        # Update the endpoint with the new version
        client.update_endpoint(
            endpoint_name,
            config={
                "served_entities": [
                    {
                        "name": model_name,
                        "entity_name": f"{env}.{model_schema}.{model_name}",
                        "entity_version": version,
                        "workload_size": "Small",
                        "scale_to_zero_enabled": True,
                    }
                ],
            },
        )
        print(f"Endpoint updated to version {version}.")

    except HTTPError as e:
        if e.response.status_code == 404:
            print("Endpoint does not exist. Creating a new endpoint...")
            try:
                endpoint = client.create_endpoint(
                    name=endpoint_name,
                    config={
                        "served_entities": [
                            {
                                "name": model_name,
                                "entity_name": f"{env}.{model_schema}.{model_name}",
                                "entity_version": version,
                                "workload_size": "Small",
                                "scale_to_zero_enabled": True,
                            }
                        ],
                        "traffic_config": {
                            "routes": [
                                {
                                    "served_model_name": model_name,
                                    "traffic_percentage": 100,
                                }
                            ]
                        },
                        "auto_capture_config": {
                            "catalog_name": env,
                            "schema_name": model_schema,
                            "enabled": True,
                        },
                    },
                )
                print(f"Endpoint {endpoint_name} created successfully.")
                return endpoint  # Return the endpoint object if needed
            except Exception as e:
                print(f"Failed to create endpoint: {e}")
                raise  # Re-raise the exception after logging it
        else:
            print(f"HTTP error occurred: {e}")
            raise


def main():
    # Get model evaluation parameters from the previous task
    model_name_full = dbutils.jobs.taskValues.get(
        "Train", "model_name", debugValue="dev.ml_team.iris_model"
    )
    model_version = dbutils.jobs.taskValues.get(
        "Train", "model_version", debugValue="1"
    )

    env, model_schema, model_name = model_name_full.split(".")

    deploy_serving_endpoint(model_name, model_version, env, model_schema)


if __name__ == "__main__":
    main()
